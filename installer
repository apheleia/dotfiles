#!/bin/bash

# Script to automatically install all required dependencies and symlink the
# configurations.
# Actual execution at the very end.
#
# If you pass "symlinks-" as the only arg, only the symlinks will be linked.
# Otherwise, everything will run.
#
# Keeps state in .state and sends output of most commands to output.log.

common_packages=(
    bat
    direnv
    fzf
    jq
    kakoune
    neovim
    python
    ranger
    ripgrep
    ruby
    task
    tig
    tmux
    vim
    w3m
    yarn
    zoxide
    zsh
)

brew_packages=(
    exa
    fd
    starship
    ul/kak-lsp/kak-lsp
)

fedora_packages=(
    exa
    git-delta
    kak-lsp
    fd-find
)

ubuntu_packages=(
    fd
)

brew_desktop_packages=(
    amethyst
    kitty
)

linux_desktop_packages=(
    dunst
    feh
    i3
    # ibus is a dependency of the KDE Plasma Emoji Picker and missing in a standard fedora installation.
    ibus
    kitty
    pavucontrol
    picom
    redshift
    redshift-gtk
    rofi
    xclip
)

#
# Functions
#

print() {
    printf "%s\n" "$1"
}

error() {
    print ""
    print "${1}:"
    printf "    "
    tail -1 ./output.log
    print ""
    print "Check output.log for more details."
    exit 1
}

redirect_output() {
    eval "$1" 1>>output.log 2>&1 || error "Could not run $1"
}

install_on_ubuntu() {
    case "$1" in
        "bat"|"ripgrep")
            # Workaround required for broken/incompatible packages ripgrep and bat
            redirect_output "sudo apt install -o Dpkg::Options::=\"--force-overwrite\" $1"
            redirect_output "sudo ln -snf /usr/bin/batcat /usr/bin/bat"
            ;;
        "fd")
            # Workaround for conflicting package names
            redirect_output "sudo apt-get -y install fd-find"
            redirect_output "sudo ln -snf /usr/bin/fdfind /usr/bin/fd"
            ;;
        "task")
            # Workaround for conflicting package names
            redirect_output "sudo apt-get -y install taskwarrior"
            ;;
        *)
            redirect_output "sudo apt-get -y install $1"
            ;;
    esac
}

install() {
    print "Installing ${1} ..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        redirect_output "brew install $1"
    else
        # Assuming Linux
        case "$linux_distro" in
            "ubuntu")
                install_on_ubuntu "$1"
                ;;
            "fedora")
                redirect_output "sudo dnf -y install $1"
                ;;
            *)
                print "Unknown distro ${linux_distro}. Exiting ..."
                exit 1
                ;;
        esac
    fi

    # Replacing invalid dash with underscore
    echo "${1//-/_}_installed=\"true\"" >> .state
}

install_brew() {
    print "Installing brew ..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    echo 'brew_installed="true"' >> .state
}

install_zsh() {
    install zsh
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells
        redirect_output "chsh -s /usr/local/bin/zsh"
    else
        # Assuming Linux
        redirect_output "sudo usermod --shell /bin/zsh $(whoami)"
    fi

    print "Zsh installed and set as your default shell. Switch to zsh and run ./installer again."
    exit 0
}

install_ohmyzsh() {
    print "Installing oh-my-zsh ..."
    print "#"
    print "# IMPORTANT: Once you are inside the new zsh shell, type 'exit'!"
    print "#"

    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" || error "Could not install oh-my-zsh"
}

symlink_configs() {
    print "Symlinking configurations ..."

    SCRIPTPATH="$( cd "$(dirname "$0")" || exit ; pwd -P )"
    ln -snf "$SCRIPTPATH"/configs/fzf/.fzf.zsh  "$HOME"/.fzf.zsh
    ln -snf "$SCRIPTPATH"/configs/git/.gitconfig  "$HOME"/.gitconfig
    ln -snf "$SCRIPTPATH"/configs/tmux/.tmux.conf  "$HOME"/.tmux.conf
    ln -snf "$SCRIPTPATH"/configs/vim/.vimrc  "$HOME"/.vimrc
    ln -snf "$SCRIPTPATH"/configs/zsh/.zshrc  "$HOME"/.zshrc

    mkdir -p "$HOME"/.config
    ln -snf "$SCRIPTPATH"/configs/bat "$HOME"/.config/bat
    ln -snf "$SCRIPTPATH"/configs/dunst "$HOME"/.config/dunst
    ln -snf "$SCRIPTPATH"/configs/kak "$HOME"/.config/kak
    ln -snf "$SCRIPTPATH"/configs/kitty "$HOME"/.config/kitty
    ln -snf "$SCRIPTPATH"/configs/kmonad "$HOME"/.config/kmonad
    ln -snf "$SCRIPTPATH"/configs/nvim "$HOME"/.config/nvim
    ln -snf "$SCRIPTPATH"/configs/picom "$HOME"/.config/picom
    ln -snf "$SCRIPTPATH"/configs/ranger "$HOME"/.config/ranger
    ln -snf "$SCRIPTPATH"/configs/starship/starship.toml "$HOME"/.config/starship.toml

    if [[ "$OSTYPE" == "darwin"* ]]; then
        # Create kak symlink to original autload:
        ln -snf "$(brew --prefix)"/share/kak/autoload "$SCRIPTPATH"/configs/kak/autoload
        # Rust under MacOS uses another config path
        ln -snf "$SCRIPTPATH"/configs/kak-lsp "$HOME"/Library/Preferences/kak-lsp
    else
        # Assuming Linux
        # Create kak symlink to original autload:
        ln -snf /usr/share/kak/autoload "$SCRIPTPATH"/configs/kak/autoload
        ln -snf "$SCRIPTPATH"/configs/kak-lsp "$HOME"/.config/kak-lsp

        if [[ "$linux_is_desktop" == "true" ]]; then
            ln -snf "$SCRIPTPATH"/configs/rofi "$HOME"/.config/rofi
            ln -snf "$SCRIPTPATH"/configs/i3 "$HOME"/.config/i3

            # Add an option to use plasma with i3 at login.
            # These must be copied. Otherwise SDDM will not show the option.
            # Only done once, because we don't want to ask for the sudo password every time we symlink.
            if [[ ! "$plasma_with_i3_session_sopied" = "true" ]]; then
                print "Copying files to start i3 session ..."
                sudo mkdir -p /usr/local/bin
                sudo cp "$SCRIPTPATH"/configs/plasma/plasma-with-i3.sh /usr/local/bin/plasma-with-i3.sh
                sudo cp "$SCRIPTPATH"/configs/plasma/plasma-with-i3.desktop /usr/share/xsessions/plasma-with-i3.desktop

                echo 'plasma_with_i3_session_sopied="true"' >> .state
            fi
        fi
    fi
}

setup() {
    rm -f output.log
    touch output.log
    
    if [[ ! -f .state ]]; then
        print ".state file not found. Creating it ..."
        touch .state
    fi
    
    # Sourcing state updates all state variables for parts that
    # are already installed.
    # You can delete individual lines from .state to reinstall.
    brew_installed=""
    zsh_installed=""
    source .state
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        if [[ ! "$brew_installed" = "true" ]]; then
            install_brew
        fi
        # Forcing brew to be in path
        PATH="/usr/local/bin:$PATH"
    else
        # Assuming Linux
        if [[ -z "$linux_distro" ]]; then
            read -p "Which distro are you on? (fedora/ubuntu) " -r linux_distro
            if [[ "$linux_distro" = "fedora" ]] || [[ "$linux_distro" = "ubuntu" ]]; then
                printf 'linux_distro="%s"\n' "$linux_distro" >> .state
            else
                print "Unknown distro. Exiting ..."
                exit 1
            fi
        fi
    
        if [[ -z "$linux_is_desktop" ]]; then
            read -p "Are you on a desktop? (y/N) " -n 1 -r linux_is_desktop
            if [[ "$linux_is_desktop" =~ ^[yY]$ ]]; then
                linux_is_desktop="true"
            else
                linux_is_desktop="false"
            fi
            printf 'linux_is_desktop="%s"\n' "$linux_is_desktop" >> .state
        fi
    fi
}

# Also symlinks configs:
installs() {
    if [[ "$linux_distro" = "fedora" ]]; then
        if [[ ! "$kakcopradded" = "true" ]]; then
            print "Adding kak-lsp copr to fedora ..."
            redirect_output "sudo dnf copr enable atim/kakoune -y"
            echo 'kakcopradded="true"' >> .state
        fi
        if [[ ! "$yarnrepoadded" = "true" ]]; then
            print "Adding yarn repo to fedora ..."
            redirect_output "curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo"
            echo 'yarnrepoadded="true"' >> .state
        fi
    fi
    
    if [[ ! "$zsh_installed" = "true" ]]; then
        install_zsh
    fi
    
    for package in "${common_packages[@]}"; do
        var_reference="${package}_installed"
        if [[ ! "${!var_reference}" = "true" ]]; then
            install "$package"
        fi
    done

    if [[ ! "$rust_installed" = "true" ]]; then
        print "Installing rust ..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

        print "You must manually 'source $HOME/.cargo/env'."
        print "Then, run ./installer again."
        echo 'rust_installed="true"' >> .state
        exit 0
    fi
    
    if [[ "$linux_distro" = "fedora" ]]; then
        print "Installing fedora packages ..."
        for package in "${fedora_packages[@]}"; do
            var_reference="${package//-/_}_installed"
            if [[ ! "${!var_reference}" = "true" ]]; then
                install "$package"
            fi
        done
    fi
    
    if [[ "$linux_distro" = "ubuntu" ]]; then
        print "Installing ubuntu packages ..."
        for package in "${ubuntu_packages[@]}"; do
            var_reference="${package}_installed"
            if [[ ! "${!var_reference}" = "true" ]]; then
                install "$package"
            fi
        done

        if [[ ! "$exa_installed" = "true" ]]; then
            print "Installing exa ..."
            redirect_output "cargo install exa"
            echo 'exa_installed="true"' >> .state
        fi

        if [[ ! "$git_delta_installed" = "true" ]]; then
            print "Installing git-delta ..."
            redirect_output "cargo install git-delta"
            echo 'git_delta_installed="true"' >> .state
        fi
    fi
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        for package in "${brew_packages[@]}"; do
            var_reference="${package}_installed"
            if [[ ! "${!var_reference}" = "true" ]]; then
                install "$package"
            fi
        done
    
        for package in "${brew_desktop_packages[@]}"; do
            var_reference="${package}_installed"
            if [[ ! "${!var_reference}" = "true" ]]; then
                redirect_output "brew cask install $1"
            fi
        done
    else
        # Assuming Linux
        if [[ ! "$starship_installed" = "true" ]]; then
            # Starship on Linux is only available as download
            print "Installing starship ..."
            curl -fsSL https://starship.rs/install.sh | sudo bash
            echo "starship_installed=\"true\"" >> .state
        fi
    
        if [[ ! "$lolcat_installed" = "true" ]]; then
            print "Installing lolcat..."
            redirect_output "gem install lolcat"
            echo 'lolcat_installed="true"' >> .state
        fi

        if [[ "$linux_is_desktop" = "true" ]]; then
            print "Installing desktop packages ..."
            for package in "${linux_desktop_packages[@]}"; do
                var_reference="${package//-/_}_installed"
                if [[ ! "${!var_reference}" = "true" ]]; then
                    install "$package"
                fi
            done
        fi
    fi
    
    if [[ ! "$ohmyzsh_installed" = "true" ]]; then
        install_ohmyzsh
        echo 'ohmyzsh_installed="true"' >> .state
    fi
    
    if [[ ! "$zshnvm_installed" = "true" ]]; then
        print "Installing zsh_nvm ..."
        mkdir -p "$HOME"/.oh-my-zsh/custom/plugins/
        git clone https://github.com/lukechilds/zsh-nvm ~/.oh-my-zsh/custom/plugins/zsh-nvm 1>>output.log 2>&1 || error "Could not install zshnvm"
        echo 'zshnvm_installed="true"' >> .state
    fi
    
    symlink_configs
    
    if [[ ! "$sourced" = "true" ]]; then
        print "You must manually 'source ~/.zshrc'."
        print "Then, run ./installer again."
        echo 'sourced="true"' >> .state
        exit 0
    fi
    
    if [[ ! "$node_installed" = "true" ]]; then
        print "You must manually 'nvm install stable'."
        print "Then, run ./installer again."
        echo 'node_installed="true"' >> .state
        exit 0
    fi
    
    if [[ ! "$npmpackages_installed" = "true" ]]; then
        print "Installing npm packages ..."
        redirect_output "npm install -g typescript"
        redirect_output "npm install -g typescript-language-server"
        redirect_output "npm install -g eslint-formatter-kakoune"
        redirect_output "sudo npm install -g typescript"
        redirect_output "sudo npm install -g typescript-language-server"
        redirect_output "sudo npm install -g eslint-formatter-kakoune"
        echo 'npmpackages_installed="true"' >> .state
    fi

    if [[ ! "$npm_nb_installed" = "true" ]]; then
        print "Installing nb ..."
        redirect_output "sudo npm install -g nb.sh"
        redirect_output "sudo $(npm bin -g)/nb completions install"
        echo 'npm_nb_installed="true"' >> .state
    fi
    
    if [[ ! "$neovimdependencies_installed" = "true" ]]; then
        print "Installing (Neo)Vim dependencies ..."
        redirect_output "pip3 install --user --upgrade pynvim"
        
        # vim-plug to manage plugins in vim
        curl -fLo "$HOME"/.vim/autoload/plug.vim --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        # same for neovim
        curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        echo 'neovimdependencies_installed="true"' >> .state
    fi
    
    if [[ ! "$kakpluginmanager_installed" = "true" ]]; then
        print "Installing kakoune plugin manager ..."
        mkdir -p "$HOME"/.config/kak/plugins
        git clone https://github.com/andreyorst/plug.kak.git "$HOME"/.config/kak/plugins/plug.kak
        echo 'kakpluginmanager_installed="true"' >> .state
    fi
    
    if [[ ! "$tmuxpluginmanager_installed" = "true" ]]; then
        print "Installing tmux plugin manager ..."
        mkdir -p "$HOME"/.config/tmux/plugins
        git clone https://github.com/tmux-plugins/tpm "$HOME"/.config/tmux/plugins/tpm
        echo 'tmuxpluginmanager_installed="true"' >> .state
    fi
    
    if [[ "$linux_distro" = "ubuntu" ]]; then
        print "Remember to manually install kak-lsp as per the following link:"
        print "https://github.com/ul/kak-lsp#others"
    fi
}

everything() {
    setup
    installs
        
    cat <<EOF
        
To finsh setup:
 * Run '<ctrl>+b' I inside tmux
 * Run ':plug-install' in kakoune
 * Run ':PlugInstall' in NeoVim
 * Add ~/.gitconfigemail and set your email address

EOF

    if [[ "$linux_is_desktop" == "true" ]]; then
        cat << EOF
On desktop:
 * Install a patched font from https://github.com/ryanoasis/nerd-fonts
   and set it in your terminal emulator
 * Map capslock to <Esc>
 * Map printscr/menu to <composer>
 * Set wallpaper with 'feh'
 * Disable all "activity" shortcuts in plasma
 * Set "Launch Spectacle" shortcut to "Meta+p"
 * Log out and choose "plasma with i3" as desktop session.
        
EOF
    fi
}

case $1 in
    "symlinks")
        symlink_configs
        ;;
    *)
        everything
        ;;
esac

